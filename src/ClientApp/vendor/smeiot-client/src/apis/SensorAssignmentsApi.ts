/* tslint:disable */
/* eslint-disable */
/**
 * SMEIoT API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdminUserApiModelList,
    AdminUserApiModelListFromJSON,
    AdminUserApiModelListToJSON,
    AssignUserSensorBindingModel,
    AssignUserSensorBindingModelFromJSON,
    AssignUserSensorBindingModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SensorAssignmentApiModel,
    SensorAssignmentApiModelFromJSON,
    SensorAssignmentApiModelToJSON,
} from '../models';

export interface SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersGetRequest {
    deviceName: string;
    sensorName: string;
    offset?: number;
    limit?: number;
}

export interface SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersPostRequest {
    deviceName: string;
    sensorName: string;
    assignUserSensorBindingModel: AssignUserSensorBindingModel;
}

export interface SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersUserNameDeleteRequest {
    deviceName: string;
    sensorName: string;
    userName: string;
}

/**
 * no description
 */
export class SensorAssignmentsApi extends runtime.BaseAPI {

    /**
     */
    async apiSensorsDeviceNameSensorNameUsersGetRaw(requestParameters: SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersGetRequest): Promise<runtime.ApiResponse<AdminUserApiModelList>> {
        if (requestParameters.deviceName === null || requestParameters.deviceName === undefined) {
            throw new runtime.RequiredError('deviceName','Required parameter requestParameters.deviceName was null or undefined when calling apiSensorsDeviceNameSensorNameUsersGet.');
        }

        if (requestParameters.sensorName === null || requestParameters.sensorName === undefined) {
            throw new runtime.RequiredError('sensorName','Required parameter requestParameters.sensorName was null or undefined when calling apiSensorsDeviceNameSensorNameUsersGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/sensors/{deviceName}/{sensorName}/users`.replace(`{${"deviceName"}}`, encodeURIComponent(String(requestParameters.deviceName))).replace(`{${"sensorName"}}`, encodeURIComponent(String(requestParameters.sensorName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserApiModelListFromJSON(jsonValue));
    }

    /**
     */
    async apiSensorsDeviceNameSensorNameUsersGet(requestParameters: SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersGetRequest): Promise<AdminUserApiModelList> {
        const response = await this.apiSensorsDeviceNameSensorNameUsersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSensorsDeviceNameSensorNameUsersPostRaw(requestParameters: SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersPostRequest): Promise<runtime.ApiResponse<SensorAssignmentApiModel>> {
        if (requestParameters.deviceName === null || requestParameters.deviceName === undefined) {
            throw new runtime.RequiredError('deviceName','Required parameter requestParameters.deviceName was null or undefined when calling apiSensorsDeviceNameSensorNameUsersPost.');
        }

        if (requestParameters.sensorName === null || requestParameters.sensorName === undefined) {
            throw new runtime.RequiredError('sensorName','Required parameter requestParameters.sensorName was null or undefined when calling apiSensorsDeviceNameSensorNameUsersPost.');
        }

        if (requestParameters.assignUserSensorBindingModel === null || requestParameters.assignUserSensorBindingModel === undefined) {
            throw new runtime.RequiredError('assignUserSensorBindingModel','Required parameter requestParameters.assignUserSensorBindingModel was null or undefined when calling apiSensorsDeviceNameSensorNameUsersPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; v=1.0';

        const response = await this.request({
            path: `/api/sensors/{deviceName}/{sensorName}/users`.replace(`{${"deviceName"}}`, encodeURIComponent(String(requestParameters.deviceName))).replace(`{${"sensorName"}}`, encodeURIComponent(String(requestParameters.sensorName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignUserSensorBindingModelToJSON(requestParameters.assignUserSensorBindingModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorAssignmentApiModelFromJSON(jsonValue));
    }

    /**
     */
    async apiSensorsDeviceNameSensorNameUsersPost(requestParameters: SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersPostRequest): Promise<SensorAssignmentApiModel> {
        const response = await this.apiSensorsDeviceNameSensorNameUsersPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSensorsDeviceNameSensorNameUsersUserNameDeleteRaw(requestParameters: SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersUserNameDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.deviceName === null || requestParameters.deviceName === undefined) {
            throw new runtime.RequiredError('deviceName','Required parameter requestParameters.deviceName was null or undefined when calling apiSensorsDeviceNameSensorNameUsersUserNameDelete.');
        }

        if (requestParameters.sensorName === null || requestParameters.sensorName === undefined) {
            throw new runtime.RequiredError('sensorName','Required parameter requestParameters.sensorName was null or undefined when calling apiSensorsDeviceNameSensorNameUsersUserNameDelete.');
        }

        if (requestParameters.userName === null || requestParameters.userName === undefined) {
            throw new runtime.RequiredError('userName','Required parameter requestParameters.userName was null or undefined when calling apiSensorsDeviceNameSensorNameUsersUserNameDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/sensors/{deviceName}/{sensorName}/users/{userName}`.replace(`{${"deviceName"}}`, encodeURIComponent(String(requestParameters.deviceName))).replace(`{${"sensorName"}}`, encodeURIComponent(String(requestParameters.sensorName))).replace(`{${"userName"}}`, encodeURIComponent(String(requestParameters.userName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSensorsDeviceNameSensorNameUsersUserNameDelete(requestParameters: SensorAssignmentsApiApiSensorsDeviceNameSensorNameUsersUserNameDeleteRequest): Promise<void> {
        await this.apiSensorsDeviceNameSensorNameUsersUserNameDeleteRaw(requestParameters);
    }

}
