/* tslint:disable */
/* eslint-disable */
/**
 * SMEIoT API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssignUserSensorBindingModel,
    AssignUserSensorBindingModelFromJSON,
    AssignUserSensorBindingModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SensorAssignmentApiModel,
    SensorAssignmentApiModelFromJSON,
    SensorAssignmentApiModelToJSON,
} from '../models';

export interface SensorAssignmentsApiApiSensorsNameUsersGetRequest {
    name: string;
}

export interface SensorAssignmentsApiApiSensorsNameUsersPostRequest {
    name: string;
    assignUserSensorBindingModel?: AssignUserSensorBindingModel;
}

export interface SensorAssignmentsApiApiSensorsNameUsersUsernameDeleteRequest {
    name: string;
    username: string;
}

/**
 * no description
 */
export class SensorAssignmentsApi extends runtime.BaseAPI {

    /**
     */
    async apiSensorsNameUsersGetRaw(requestParameters: SensorAssignmentsApiApiSensorsNameUsersGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling apiSensorsNameUsersGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/sensors/{name}/users`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiSensorsNameUsersGet(requestParameters: SensorAssignmentsApiApiSensorsNameUsersGetRequest): Promise<object> {
        const response = await this.apiSensorsNameUsersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSensorsNameUsersPostRaw(requestParameters: SensorAssignmentsApiApiSensorsNameUsersPostRequest): Promise<runtime.ApiResponse<SensorAssignmentApiModel>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling apiSensorsNameUsersPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; v=1.0; v=1.0';

        const response = await this.request({
            path: `/api/sensors/{name}/users`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssignUserSensorBindingModelToJSON(requestParameters.assignUserSensorBindingModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorAssignmentApiModelFromJSON(jsonValue));
    }

    /**
     */
    async apiSensorsNameUsersPost(requestParameters: SensorAssignmentsApiApiSensorsNameUsersPostRequest): Promise<SensorAssignmentApiModel> {
        const response = await this.apiSensorsNameUsersPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSensorsNameUsersUsernameDeleteRaw(requestParameters: SensorAssignmentsApiApiSensorsNameUsersUsernameDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling apiSensorsNameUsersUsernameDelete.');
        }

        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling apiSensorsNameUsersUsernameDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/sensors/{name}/users/{username}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSensorsNameUsersUsernameDelete(requestParameters: SensorAssignmentsApiApiSensorsNameUsersUsernameDeleteRequest): Promise<void> {
        await this.apiSensorsNameUsersUsernameDeleteRaw(requestParameters);
    }

}
