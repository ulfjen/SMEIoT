/* tslint:disable */
/* eslint-disable */
/**
 * SMEIoT API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SensorDetailsApiModel,
    SensorDetailsApiModelFromJSON,
    SensorDetailsApiModelToJSON,
    SensorDetailsApiModelList,
    SensorDetailsApiModelListFromJSON,
    SensorDetailsApiModelListToJSON,
    SensorLocatorBindingModel,
    SensorLocatorBindingModelFromJSON,
    SensorLocatorBindingModelToJSON,
} from '../models';

export interface SensorsApiApiSensorsDeviceNameSensorNameGetRequest {
    deviceName: string;
    sensorName: string;
    startedAt?: string;
    duration?: string;
}

export interface SensorsApiApiSensorsGetRequest {
    offset?: number;
    limit?: number;
}

export interface SensorsApiApiSensorsPostRequest {
    sensorLocatorBindingModel: SensorLocatorBindingModel;
}

/**
 * no description
 */
export class SensorsApi extends runtime.BaseAPI {

    /**
     */
    async apiSensorsDeviceNameSensorNameGetRaw(requestParameters: SensorsApiApiSensorsDeviceNameSensorNameGetRequest): Promise<runtime.ApiResponse<SensorDetailsApiModel>> {
        if (requestParameters.deviceName === null || requestParameters.deviceName === undefined) {
            throw new runtime.RequiredError('deviceName','Required parameter requestParameters.deviceName was null or undefined when calling apiSensorsDeviceNameSensorNameGet.');
        }

        if (requestParameters.sensorName === null || requestParameters.sensorName === undefined) {
            throw new runtime.RequiredError('sensorName','Required parameter requestParameters.sensorName was null or undefined when calling apiSensorsDeviceNameSensorNameGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.startedAt !== undefined) {
            queryParameters['started_at'] = requestParameters.startedAt;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/sensors/{deviceName}/{sensorName}`.replace(`{${"deviceName"}}`, encodeURIComponent(String(requestParameters.deviceName))).replace(`{${"sensorName"}}`, encodeURIComponent(String(requestParameters.sensorName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorDetailsApiModelFromJSON(jsonValue));
    }

    /**
     */
    async apiSensorsDeviceNameSensorNameGet(requestParameters: SensorsApiApiSensorsDeviceNameSensorNameGetRequest): Promise<SensorDetailsApiModel> {
        const response = await this.apiSensorsDeviceNameSensorNameGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSensorsGetRaw(requestParameters: SensorsApiApiSensorsGetRequest): Promise<runtime.ApiResponse<SensorDetailsApiModelList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/sensors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorDetailsApiModelListFromJSON(jsonValue));
    }

    /**
     */
    async apiSensorsGet(requestParameters: SensorsApiApiSensorsGetRequest): Promise<SensorDetailsApiModelList> {
        const response = await this.apiSensorsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSensorsPostRaw(requestParameters: SensorsApiApiSensorsPostRequest): Promise<runtime.ApiResponse<SensorDetailsApiModel>> {
        if (requestParameters.sensorLocatorBindingModel === null || requestParameters.sensorLocatorBindingModel === undefined) {
            throw new runtime.RequiredError('sensorLocatorBindingModel','Required parameter requestParameters.sensorLocatorBindingModel was null or undefined when calling apiSensorsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; v=1.0';

        const response = await this.request({
            path: `/api/sensors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SensorLocatorBindingModelToJSON(requestParameters.sensorLocatorBindingModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorDetailsApiModelFromJSON(jsonValue));
    }

    /**
     */
    async apiSensorsPost(requestParameters: SensorsApiApiSensorsPostRequest): Promise<SensorDetailsApiModel> {
        const response = await this.apiSensorsPostRaw(requestParameters);
        return await response.value();
    }

}
